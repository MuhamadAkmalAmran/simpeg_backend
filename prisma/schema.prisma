// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid())
  nama               String             @db.VarChar(100)
  nip                String             @unique @db.VarChar(100)
  status_kepegawaian Status_Kepegawaian
  email              String?            @unique @db.VarChar(100)
  password           String             @db.VarChar(100)
  role               Role               @default(USER)
  token              String?            @db.Text
  img_url            String?            @db.Text
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  profile            Profile?
  positions          Position[]
  educations         Education[]
  trainings          Training[]
  titles             Title[]
  families           Family[]
  achievements       Achievement[]
  documents          Document[]
  performances       Performance[]

  @@map("users")
}

enum Role {
  ADMIN @map("admin")
  USER  @map("user")
}

model Profile {
  id                 String    @id @default(uuid())
  nik                String?   @db.VarChar(100)
  gelar_depan        String?   @db.VarChar(100)
  gelar_belakang     String?   @db.VarChar(100)
  tempat_lahir       String?   @db.VarChar(100)
  tanggal_lahir      DateTime? @db.Date
  jenis_kelamin      Gender?
  agama              Religion?
  status_kepegawaian String?   @db.VarChar(100)
  golongan_darah     Blood?
  nomor_telepon      String?   @db.VarChar(100)
  alamat             String?   @db.VarChar(100)
  provinsi           String?   @db.VarChar(100)
  kabupaten_kota     String?   @db.VarChar(100)
  kecamatan          String?   @db.VarChar(100)
  kelurahan          String?   @db.VarChar(100)
  user_id            String    @unique
  user               User      @relation(fields: [user_id], references: [id])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("profiles")
}

model Position {
  id                String   @id @default(uuid())
  no_sk             String   @db.VarChar(100)
  tanggal_sk        DateTime @db.Date
  tmt               DateTime @db.Date
  gaji_pokok        Int
  file_url          String   @db.Text
  status_verifikasi Status   @default(pending)
  alasan_ditolak    String?   @db.VarChar(100)
  user_id           String
  user              User     @relation(fields: [user_id], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("positions")
}

model Education {
  id                String   @id @default(uuid())
  jenjang           String   @db.VarChar(100)
  nama              String   @db.VarChar(100)
  jurusan           String   @db.VarChar(100)
  tahun_lulus       Int      @db.Year
  file_url          String   @db.Text
  status_verifikasi Status   @default(pending)
  alasan_ditolak    String?  @db.VarChar(100)
  user_id           String
  user              User     @relation(fields: [user_id], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("educations")
}

model Training {
  id                String   @id @default(uuid())
  nama              String   @db.VarChar(100)
  penyelenggara     String   @db.VarChar(100)
  jpl               Int
  tahun_kegiatan    Int      @db.Year
  file_url          String?  @db.Text
  status_verifikasi Status   @default(pending)
  alasan_ditolak    String?  @db.VarChar(100)
  user_id           String
  user              User     @relation(fields: [user_id], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("trainings")
}

model Title {
  id                String   @id @default(uuid())
  jabatan           String   @db.VarChar(100)
  unit_kerja        String   @db.VarChar(100)
  tmt               DateTime @db.Date
  tanggal_berakhir  DateTime @db.Date
  no_sk             String   @db.VarChar(100)
  tanggal_sk        DateTime @db.Date
  file_url          String?  @db.Text
  status_verifikasi Status   @default(pending)
  alasan_ditolak    String?  @db.VarChar(100)
  user_id           String
  user              User     @relation(fields: [user_id], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("titles")
}

model Family {
  id                String       @id @default(uuid())
  nik               String       @db.VarChar(16)
  nama              String       @db.VarChar(100)
  tempat            String       @db.VarChar(100)
  tanggal_lahir     DateTime     @db.Date
  jenis_kelamin     Gender
  agama             Religion
  hubungan_kel      Relationship
  status_verifikasi Status       @default(pending)
  alasan_ditolak    String?      @db.VarChar(100)
  user_id           String
  user              User         @relation(fields: [user_id], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@map("families")
}

model Achievement {
  id                String   @id @default(uuid())
  nama              String   @db.VarChar(100)
  tingkat           String   @db.VarChar(100)
  tahun             Int      @db.Year
  penyelenggara     String   @db.VarChar(100)
  file_url          String?  @db.Text
  status_verifikasi Status   @default(pending)
  alasan_ditolak    String?  @db.VarChar(100)
  user_id           String
  user              User     @relation(fields: [user_id], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("achievements")
}

model Performance {
  id                String   @id @default(uuid())
  nilai_kerja       Int
  predikat          Predikat
  file_url          String?  @db.Text
  status_verifikasi Status   @default(pending)
  alasan_ditolak    String?  @db.VarChar(100)
  user_id           String
  user              User     @relation(fields: [user_id], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("performances")
}

model Document {
  id                String   @id @default(uuid())
  jenis_dokumen     Dokumen
  no_dokumen        String   @db.VarChar(100)
  file_url          String?  @db.Text
  status_verifikasi Status   @default(pending)
  alasan_ditolak    String?  @db.VarChar(100)
  user_id           String
  user              User     @relation(fields: [user_id], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("documents")
}

model School {
  id String @id @default(uuid())
  npsn String @db.VarChar(100)
  nama String @db.VarChar(100)
  jenjang String @db.VarChar(100) 
}

enum Predikat {
  A
  AB
  B
  BC
  C
  D
  E
}

enum Status {
  accepted @map("Diterima")
  rejected @map("Ditolak")
  pending  @map("Menunggu")
}

enum Relationship {
  anak  @map("Anak")
  istri @map("Istri")
  suami @map("Suami")
}

enum Gender {
  laki_laki @map("Laki-Laki")
  perempuan @map("Perempuan")
}

enum Religion {
  islam    @map("Islam")
  kriten   @map("Kristen")
  katolik  @map("Katolik")
  hindu    @map("Hindu")
  buddha   @map("Buddha")
  konghucu @map("Konghucu")
}

enum Blood {
  A
  B
  O
  AB
}

enum Sekolah {
  SD
  SMP
  SMA
  S1
  S2
  S3
  PROFESI   @map("Profesi")
  SPESIALIS @map("Spesialis")
}

enum Dokumen {
  KTP
  NBM
  PASPOR @map("Paspor")
  KK     @map("Kartu Keluarga")
  NUPTK
  NPWP
  BPJS
}

enum Status_Kepegawaian {
  tetap   @map("Pegawai Tetap")
  kontrak @map("Pegawai Kontrak")
}
